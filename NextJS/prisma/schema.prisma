// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id   Int       @id @default(autoincrement())
  name String    @unique
  cif  String    @unique
  User Profile[]

  @@map("companies")
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  role_id  Int
  role     Role      @relation(fields: [role_id], references: [id])
  profile  Profile?
  sessions Session[]

  @@map("users")
}

model Profile {
  user_id           String       @id
  name              String
  surname           String
  slug              String       @unique
  slug_number       Int
  active            Boolean
  image_url         String
  identity_document String       @unique
  company_id        Int
  user              User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company           Company      @relation(fields: [company_id], references: [id])
  attendances       Attendance[]
  teams             Team[]

  @@map("profiles")
}

model Team {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  members  Profile[]
  policies Policy[]

  @@map("teams")
}

model Attendance {
  id               Int          @id @default(autoincrement())
  user_id          String
  check_in         DateTime
  check_out        DateTime?
  worker_status_id Int
  profile          Profile      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  worker_status    WorkerStatus @relation(fields: [worker_status_id], references: [id])

  @@map("attendances")
}

model WorkerStatus {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  attendance Attendance[]

  @@map("worker_statuses")
}

model Role {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  user   User[]
  Policy Policy[]

  @@map("roles")
}

model Permission {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  policies Policy[]

  @@map("permissions")
}

model Policy {
  id            Int        @id @default(autoincrement())
  role_id       Int
  team_id       Int
  permission_id Int
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  team          Team       @relation(fields: [team_id], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([role_id, team_id, permission_id])
  @@map("policies")
}

model Session {
  user_id String @id
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token   String
  device  String

  @@map("sessions")
}
