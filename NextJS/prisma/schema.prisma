// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id   Int    @id @default(autoincrement())
  name String @unique
  cif  String @unique
}

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  name              String
  surname           String
  slug              String       @unique
  identity_document String       @unique
  roleId            Int
  active            Boolean
  image_url         String
  role              Role         @relation(fields: [roleId], references: [id])
  profile           Profile?
  sessions          Session[]
  attendances       Attendance[]

  @@map("users")
}

model Attendance {
  id               Int          @id @default(autoincrement())
  user_id          String
  check_in         DateTime[]
  check_out        DateTime[]
  worker_status_id Int
  user             User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  worker_status    WorkerStatus @relation(fields: [worker_status_id], references: [id])

  @@map("attendances")
}

model WorkerStatus {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  attendance Attendance[]

  @@map("worker_statuses")
}

model Role {
  id   Int    @id
  name String @unique
  user User[]

  @@map("roles")
}

model Profile {
  user_id String @id
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  userId String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  token  String
  device String

  @@map("sessions")
}
